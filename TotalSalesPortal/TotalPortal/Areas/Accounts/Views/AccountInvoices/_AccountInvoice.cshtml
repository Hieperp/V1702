@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Accounts.ViewModels.AccountInvoiceViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopA.cshtml")
        
    @Html.HiddenFor(model => model.AccountInvoiceID)
    
    @Html.HiddenFor(model => model.PrintOptionID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")

        @Html.EditorFor(d => d.Code, new { SOCodeReadonly = true })
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerPO)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.CustomerPO).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.CustomerPO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VATInvoiceDate)
            <div class="div-input">
                @Html.Kendo().DatePickerFor(model => model.VATInvoiceDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.VATInvoiceDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VATInvoiceNo)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.VATInvoiceNo).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.VATInvoiceNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VATInvoiceSeries)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.VATInvoiceSeries).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.VATInvoiceSeries, "", new { @class = "text-danger" })
            </div>
        </div>


        @Html.HiddenFor(model => model.TradePromotionID)
        @if (@Model.TradePromotionID != null)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.TradePromotionSpecs)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.TradePromotionSpecs).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
            </div>
        }
        
    </div>

    <div class="right-panel">
        <div class="right-top-panel right-top-panel-H2">
            @Html.EditorFor(d => d.Customer, new { CustomerDescriptionHidden = "false", CustomerDisplayName = @Model.GetDisplayName(m => m.Customer), CustomerIcon = "Customer White 24.png" })

            @if (Model.ReceiverID != null && Model.ReceiverID > 0)
            {
                @Html.EditorFor(d => d.Receiver, new { CustomerDescriptionHidden = "true", CustomerDisplayName = @Model.GetDisplayName(m => m.Receiver), CustomerIcon = "Customer Red 24.png"})

                <div style="float: right; margin-top: -70px; " title="Khách hàng">
                    @Html.DisplayFor(d => d.Consumer, "Commons/CustomerBox")
                </div>
            }
            else
            {
                @Html.EditorFor(d => d.Consumer, new { CustomerDescriptionHidden = "true", CustomerDisplayName = @Model.GetDisplayName(m => m.Consumer), NullCustomer = (Model.ConsumerID > 0 ? null : "Xuất HĐ từ dữ liệu bán hàng tổng hợp của nhiều khách hàng") })}

            @if (Model.GoodsIssueID != null && Model.GoodsIssueID > 0)
            {
                <div style="float: right; margin-top: -70px; " title="Phiếu xuất kho">
                    @Html.DisplayFor(d => d.GoodsIssue)
                </div>
            }
        </div>

        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.AccountInvoiceViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.AccountInvoiceDetailID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= AccountInvoiceDetailID #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].AccountInvoiceDetailID' value='#= AccountInvoiceDetailID #' />");
                    columns.Bound(p => p.AccountInvoiceID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= AccountInvoiceID #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].AccountInvoiceID' value='#= AccountInvoiceID #' />");


                    columns.Bound(p => p.GoodsIssueID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= GoodsIssueID #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].GoodsIssueID' value='#= GoodsIssueID #' />");
                    columns.Bound(p => p.GoodsIssueDetailID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= GoodsIssueDetailID #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].GoodsIssueDetailID' value='#= GoodsIssueDetailID #' />");


                    columns.Bound(p => p.GoodsIssueReference).DisplayNameTitle().Filterable(false).Width(55).Hidden(@Model.GoodsIssue != null && @Model.GoodsIssue.GoodsIssueID != null ? true : false)
                        .ClientTemplate("#= GoodsIssueReference #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].GoodsIssueReference' value='#= GoodsIssueReference #' />");
                    columns.Bound(p => p.GoodsIssueCode).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (GoodsIssueCode == null)? '' : GoodsIssueCode #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].GoodsIssueCode' value='#= (GoodsIssueCode == null) ? '' : GoodsIssueCode #' />");                                        
                    columns.Bound(p => p.GoodsIssueEntryDate).DisplayNameTitle().Filterable(false).Width(90).Hidden(@Model.GoodsIssue != null && @Model.GoodsIssue.GoodsIssueID != null ? true : false)
                        .ClientTemplate("#= GoodsIssueEntryDate ? kendo.toString(kendo.parseDate(GoodsIssueEntryDate), '" + SettingsManager.DateFormat + "') : '' #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].GoodsIssueEntryDate' value='#= kendo.toString(GoodsIssueEntryDate, '" + SettingsManager.DateFormat + "') #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false).Width(160)
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)")
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    
                    columns.Bound(p => p.CalculatingTypeID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CalculatingTypeID #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].CalculatingTypeID' value='#= CalculatingTypeID #' />");
                    columns.Bound(p => p.VATbyRow).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= VATbyRow #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].VATbyRow' value='#= VATbyRow #' />");
                    
                    
                    columns.Bound(p => p.ControlFreeQuantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', ControlFreeQuantity) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].ControlFreeQuantity' value='#= ControlFreeQuantity #' />");

                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Filterable(false).Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"})
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', QuantityRemains) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");
                    columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(50)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', Quantity) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.FreeQuantityRemains).DisplayNameTitle().Filterable(false).Width(20).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"})
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= FreeQuantityRemains #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].FreeQuantityRemains' value='#= FreeQuantityRemains #' />");
                    columns.Bound(p => p.FreeQuantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(50)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', FreeQuantity) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].FreeQuantity' value='#= FreeQuantity #' />");

                    columns.Bound(p => p.ListedPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(70)
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedPrice) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].ListedPrice' value='#= ListedPrice #' />");

                    columns.Bound(p => p.DiscountPercent).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Hidden(@Model.ShowDiscount ? false : true)
                        .Format("{0:n1}%")
                        .ClientFooterTemplate("#= kendo.format('{0:n1}%', average) #")
                        .ClientTemplate("#= kendo.format('{0:n1}%', DiscountPercent) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].DiscountPercent' value='#= DiscountPercent #' />");

                    columns.Bound(p => p.UnitPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(70).Hidden(@Model.ShowDiscount ? false : true)
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', UnitPrice) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");

                    columns.Bound(p => p.TradeDiscountRate).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}%', TradeDiscountRate) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].TradeDiscountRate' value='#= TradeDiscountRate #' />");

                    columns.Bound(p => p.ListedAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(120).Hidden(@Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate(@Model.VATbyRow ? "#= kendo.format('{0:n0}', sum) #" : "<div>CK <span>#= data.TradeDiscountRate.max #</span>%: #= kendo.format('{0:n0}', DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TT: #= kendo.format('{0:n0}', DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ")) #</div><div>VAT <span>#= data.VATPercent.max #</span>%: #= kendo.format('{0:n0}', DoRound(DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TC: #= kendo.format('{0:n0}', DoRound(DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") - (-DoRound(DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")), " + GlobalEnums.rndAmount + ")) #</div>")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedAmount) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].ListedAmount' value='#= ListedAmount #' />");
                    columns.Bound(p => p.Amount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(120).Hidden(@Model.ShowDiscount ? false : true)
                        .Format("{0:n0}")
                        .ClientFooterTemplate(@Model.VATbyRow ? "#= kendo.format('{0:n0}', sum) #" : "<div>CK <span>#= data.TradeDiscountRate.max #</span>%: #= kendo.format('{0:n0}', DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TT: #= kendo.format('{0:n0}', DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ")) #</div><div>VAT <span>#= data.VATPercent.max #</span>%: #= kendo.format('{0:n0}', DoRound(DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TC: #= kendo.format('{0:n0}', DoRound(DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") - (-DoRound(DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")), " + GlobalEnums.rndAmount + ")) #</div>")
                        .ClientTemplate("#= kendo.format('{0:n0}', Amount) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].Amount' value='#= Amount #' />");

                    columns.Bound(p => p.VATPercent).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(50).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");

                    columns.Bound(p => p.ListedVATAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(90).Width(90).Hidden(!@Model.VATbyRow || @Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedVATAmount) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].ListedVATAmount' value='#= ListedVATAmount #' />");
                    columns.Bound(p => p.VATAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(90).Hidden(!@Model.VATbyRow || !@Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', VATAmount) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");


                    columns.Bound(p => p.ListedGrossPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(90).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedGrossPrice) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].ListedGrossPrice' value='#= ListedGrossPrice #' />");
                    columns.Bound(p => p.GrossPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(90).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', GrossPrice) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");


                    columns.Bound(p => p.ListedGrossAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(90).Hidden(!@Model.VATbyRow || @Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedGrossAmount) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].ListedGrossAmount' value='#= ListedGrossAmount #' />");
                    columns.Bound(p => p.GrossAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(90).Hidden(!@Model.VATbyRow || !@Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', GrossAmount) #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");

                    columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                    columns.Bound(p => p.IsBonus).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (IsBonus == null)? '' : IsBonus #" + "<input type='hidden' name='AccountInvoiceViewDetails[#= index(data) #].IsBonus' value='#= (IsBonus == null) ? '' : IsBonus #' />");

                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(40).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });
                })
                .Filterable()
                .Navigatable()
                .ToolBar(toolbar =>
                {
                    if (Model.Editable)
                    {
                        toolbar.Template(@<text>
                            <button type="button" class="k-button" onclick="GetPendingGoodsIssueDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng xuất HĐ </button>
                            <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Xuất HĐ theo số lượng xuất kho </button>
                        </text>);
                    }
                    else
                    {//Add a functionless button for display purpose only
                        toolbar.Template(
                            @<text>
                                <div>
                                    @(Html.Kendo().Button()
                                        .Name("iconButton")
                                        .HtmlAttributes(new { type = "button" })
                                        .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                    )
                                </div>
                            </text>);
                    }
                })


                .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                .Selectable(settings =>
                {
                    settings.Mode(GridSelectionMode.Multiple);
                    settings.Type(GridSelectionType.Row);
                })

                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.AccountInvoiceDetailID);
                        model.Field(m => m.AccountInvoiceDetailID).DefaultValue(0);
                        model.Field(m => m.AccountInvoiceID).DefaultValue(@Model.AccountInvoiceID);
                        model.Field(m => m.CalculatingTypeID).DefaultValue(@GlobalEnums.CalculatingTypeID);                                                        
                        model.Field(m => m.VATbyRow).DefaultValue(@Model.VATbyRow);
                    })
                    .Events(events =>
                    {
                        events.Error("kendGrid_ErrorHandler");
                    })
                    .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                    .Aggregates(a => a.Add(x => x.TradeDiscountRate).Max())
                    .Aggregates(a => a.Add(x => x.VATPercent).Max())
                    .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                    .Aggregates(a => a.Add(x => x.FreeQuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.FreeQuantity).Sum())
                    .Aggregates(a => a.Add(x => x.DiscountPercent).Average())
                    .Aggregates(a => a.Add(x => x.ListedAmount).Sum())
                    .Aggregates(a => a.Add(x => x.Amount).Sum())
                    .Aggregates(a => a.Add(x => x.ListedVATAmount).Sum())
                    .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                    .Aggregates(a => a.Add(x => x.ListedGrossAmount).Sum())
                    .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                )
            )

        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>

                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PaymentTerm.cshtml")

                                @*<div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>

        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                @Html.HiddenFor(model => model.PrintAfterClosedSubmit)
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "AccountInvoices")"> <img src="~/Content/Images/New/save-icon.png" /> Lưu hóa đơn </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "AccountInvoices")" onclick="$('#PrintAfterClosedSubmit').val(true); $('#PrintOptionID').val(1);"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In hóa đơn</button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "AccountInvoices")" onclick="$('#PrintAfterClosedSubmit').val(true); $('#PrintOptionID').val(0);"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In hóa đơn chi tiết chiết khấu</button>
            }
            else
            {
                @*<button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("PrintDetail", "AccountInvoices", new { id = @Model.AccountInvoiceID })'"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In bảng kê</button>*@
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", "AccountInvoices", new { id = @Model.AccountInvoiceID })'"> <img src="~/Content/Images/New/Apps-printer-icon.png" /> In hóa đơn</button>
            }
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

    </div>
}

<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>


<script type="text/javascript">

    function GetPendingGoodsIssueDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingGoodsIssueDetails", "AccountInvoices", new { area = "Accounts" })", "Chọn mặt hàng xuất hóa đơn", "@SettingsManager.PopupWidthLarge", "@SettingsManager.PopupHeightWithTab");
        });
    }

</script>

<style type="text/css">
    .k-event {
        min-height: 48px;
        height: 48px;
    }
</style>

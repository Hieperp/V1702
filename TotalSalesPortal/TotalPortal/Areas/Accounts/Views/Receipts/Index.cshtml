@using TotalBase.Enums;
@using TotalPortal.Configuration

<div id="popupWindow"></div>

<div>
    @(Html.Kendo().Grid<TotalModel.Models.ReceiptIndex>()
        .Name("kendoGridIndex")
        .Columns(columns =>
        {
            columns.Bound(p => p.ReceiptID).DisplayNameTitle().Hidden();
            columns.Bound(p => p.EntryDate).Title("Ngày").Format("{0:dd/MM/yyyy}").Width(20);
            columns.Bound(p => p.Reference).Title("#").Width(10).ClientTemplate("<a href='" + Url.RouteUrl("Default", new { controller = "Accounts/Receipts", action = "Edit" }) + "/#= ReceiptID #'>#=Reference#</a>");
            columns.Bound(p => p.CustomerName).Title("Khách hàng").Width(180);
            columns.Bound(p => p.GoodsIssueReferences).Title("PXK").Width(160);
            columns.Bound(p => p.DebitAccountType).Title("TM/CK").HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(10);
            columns.Bound(p => p.DebitAccountCode).Title("CTCN").Width(20);
            columns.Bound(p => p.DebitAccountDate).Title("Ngày").Format("{0:dd/MM/yyyy}").Width(20);

            columns.Bound(p => p.TotalDepositAmount).Title("Thanh toán").Format("{0:n0}").Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
            columns.Bound(p => p.TotalReceiptAmount).Title("Thu bán hàng").Format("{0:n0}").Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
            columns.Bound(p => p.TotalCashDiscount).Title("Ck TT").Format("{0:n0}").Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
            columns.Bound(p => p.TotalOtherDiscount).Title("Ck khác").Format("{0:n0}").Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
            columns.Bound(p => p.TotalFluctuationAmount).Title("Thu khác").Format("{0:n0}").Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
            columns.Bound(p => p.TotalDepositAmountPending).Title("Còn lại").Format("{0:n0}").Width(60).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Filterable(false).ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });

            columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(90)
                .ClientTemplate("<a class='k-button' style='padding-left:5px; min-width:28px; width:28px' href='" + Url.RouteUrl("Default", new { controller = "Accounts/Receipts", action = "Edit" }) + "/#= ReceiptID #'><span class='k-icon k-edit'></span></a> <a class='k-button' style='padding-left:0px; padding-right:0px; min-width:28px; width:28px' href='" + Url.RouteUrl("Default", new { controller = "Accounts/Receipts", action = "Delete" }) + "/#= ReceiptID #'><span class='k-icon k-delete'></span></a>");
        })
        .ToolBar(toolbar =>
            {
                toolbar.Template(@<text> 
                    <button type="button" class="k-button" onclick="createWizard()"> <img src="~/Content/Images/Mains/Size24/folder-documents-icon-24.png" /> Lập phiếu thu, hoặc phiếu cấn trừ công nợ </button> 
                    <div class="toolbar" style="float: right;">
                        <label>Nhập số phiếu thu, PXK hoặc tên khách hàng để tìm</label>
                        <input id="indexFilterText" class="k-textbox" style="text-align: center; " onkeyup="indexFilterText_KeyUp()" />
                    </div>
                </text>);
            })
            .Pageable()
            .Groupable()
            .Filterable(f => f.Enabled(false))
            .Selectable()
            .Sortable()
            .Events(e =>
            {
                e.DataBound("hightLightSelectedRow");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("GetReceiptIndexes", "ReceiptAPIs"))
                .Sort(sort =>
                    {
                        sort.Add(p => p.EntryDate).Descending();
                        sort.Add(p => p.ReceiptID).Descending();
                    })
                .PageSize(20)
                .Model(model =>
                {
                    model.Id(x => x.ReceiptID);
                    model.Field(m => m.ReceiptID).DefaultValue(0);
                })
                .ServerOperation(true)
                .Aggregates(a => a.Add(x => x.TotalDepositAmount).Sum())
                .Aggregates(a => a.Add(x => x.TotalReceiptAmount).Sum())
                .Aggregates(a => a.Add(x => x.TotalCashDiscount).Sum())
                .Aggregates(a => a.Add(x => x.TotalOtherDiscount).Sum())
                .Aggregates(a => a.Add(x => x.TotalFluctuationAmount).Sum())
                .Aggregates(a => a.Add(x => x.TotalDepositAmountPending).Sum())
                )
                .HtmlAttributes(new { @class = "grid-class" })
    )
</div>





<script type="text/javascript">
    function hightLightSelectedRow(e) {
        require(["kindexGrid"], function (kindexGrid) {
            var kindexGridInstance = new kindexGrid("kendoGridIndex");
            kindexGridInstance.setSelectedRow("ReceiptID", '@ViewBag.SelectedEntityID');
        });
    }

    function createWizard() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("CreateWizard", "Receipts")", "Chọn phiếu xuất kho, hoặc khách hàng, sau đó chọn phiếu cấn trừ công nợ (nếu có)", "@SettingsManager.PopupWidth", "@SettingsManager.PopupHeightWithTab");
        });
    }

    decoratingKindex = function (idx, elem) {

        var receiptTypeID = elem.ReceiptTypeID;
        if (receiptTypeID != null && receiptTypeID == "@GlobalReceiptTypeID.ApplyCredit") {
            $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus");
        }

        var totalDepositAmountPending = elem.TotalDepositAmountPending;
        if (totalDepositAmountPending != null && totalDepositAmountPending > 0) {
            $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus1");
        }
    }



    function indexFilterText_KeyUp() {
        var indexFilterText = $("#indexFilterText").val(), gridDetails = $("#kendoGridIndex").data("kendoGrid");

        if (indexFilterText && indexFilterText.length >= "@SettingsManager.AutoCompleteMinLenght") {
            gridDetails.dataSource.filter({
                logic: "or",
                filters: [
                    { field: "Reference", operator: "contains", value: indexFilterText },
                    { field: "GoodsIssueReferences", operator: "contains", value: indexFilterText },
                    { field: "CustomerName", operator: "contains", value: indexFilterText }
                ]
            });


        } else {
            if (gridDetails.dataSource.filter() != undefined)
                gridDetails.dataSource.filter({});
        }
    }
</script>
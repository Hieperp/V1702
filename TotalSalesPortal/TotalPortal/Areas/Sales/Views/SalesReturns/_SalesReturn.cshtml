@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Sales.ViewModels.SalesReturnViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopA.cshtml")
    
    @Html.HiddenFor(model => model.SalesReturnID)
    @Html.HiddenFor(model => model.HasGoodsIssue)    


    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")

        @Html.EditorFor(d => d.Code)

        <div class="form-group">
            @Html.EditorFor(d => d.Salesperson, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.Salesperson) })
        </div>


        @Html.HiddenFor(model => model.TradePromotionID)
        @if (@Model.TradePromotionID != null)
        {            
            <div class="form-group">
                @Html.LabelFor(model => model.TradePromotionSpecs)
                <div class="div-input">
                    @Html.Kendo().MaskedTextBoxFor(model => model.TradePromotionSpecs).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
                </div>
            </div>
        }
                

    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H1">

            @Html.EditorFor(d => d.Customer, new { CustomerDescriptionHidden = "true", CustomerDisplayName = @Model.GetDisplayName(m => m.Customer) })
            @Html.EditorFor(d => d.Receiver, new { CustomerDescriptionHidden = "false", CustomerDisplayName = @Model.GetDisplayName(m => m.Receiver), CustomerIcon = "Customer Red 24.png" })

            @Html.EditorFor(d => d.ShippingAddress)
            @Html.EditorFor(d => d.Addressee)

            @Html.EditorFor(d => d.Promotion)

            <div style="float: right; margin-top: -199px; " title="Phiếu xuất kho">
                @Html.DisplayFor(d => d.GoodsIssue, new { ShowByReceiver = "" })
            </div>

            @Html.DisplayFor(d => d.Warehouse, "Commons/WarehouseBase")
            <div style="display:none;"> @Html.Partial("~/Views/Helpers/Commons/_PriceCategory.cshtml") </div>

        </div>

        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.SalesReturnViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.SalesReturnDetailID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= SalesReturnDetailID #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].SalesReturnDetailID' value='#= SalesReturnDetailID #' />");
                    columns.Bound(p => p.SalesReturnID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= SalesReturnID #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].SalesReturnID' value='#= SalesReturnID #' />");

                    columns.Bound(p => p.GoodsIssueID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (GoodsIssueID == null)? '' : GoodsIssueID #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].GoodsIssueID' value='#= (GoodsIssueID == null) ? '' : GoodsIssueID #' />");
                    columns.Bound(p => p.GoodsIssueDetailID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (GoodsIssueDetailID == null)? '' : GoodsIssueDetailID #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].GoodsIssueDetailID' value='#= (GoodsIssueDetailID == null) ? '' : GoodsIssueDetailID #' />");

                    columns.Bound(p => p.GoodsIssueReference).DisplayNameTitle().Filterable(false).Width(60).Hidden(@Model.HasGoodsIssue && @Model.GoodsIssueID == null ? false : true)
                        .ClientTemplate("#= (GoodsIssueReference == null)? '' : GoodsIssueReference #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].GoodsIssueReference' value='#= (GoodsIssueReference == null) ? '' : GoodsIssueReference #' />");
                    columns.Bound(p => p.GoodsIssueEntryDate).DisplayNameTitle().Filterable(false).Width(80).Hidden(@Model.HasGoodsIssue && @Model.GoodsIssueID == null ? false : true)
                        .Format("{0:" + @SettingsManager.DateFormat + "}")
                        .ClientTemplate("#= (GoodsIssueEntryDate == null)? '' : kendo.format('{0:" + @SettingsManager.DateFormat + "}', GoodsIssueEntryDate) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].GoodsIssueEntryDate' value='#= (GoodsIssueEntryDate == null) ? '' : kendo.format('{0:" + @SettingsManager.DateFormat + "}', GoodsIssueEntryDate) #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Width(90).HtmlAttributes(new { style = "" }).Hidden()
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false).Width(200).EditorTemplateName(@Model.HasGoodsIssue ? "StringReadonly" : "AutoCompletes/CommodityAvailable")
                        .ClientFooterTemplate("Tổng cộng (#= kendo.format('{0:n0}', count) # dòng)")
                        .ClientTemplate("<div> #= CommodityCode #</div>" +
                        //"<div> #= '[' ##= WarehouseCode ##= ']' #</div>" +
                                "<div> #= (VoidTypeName == null)? '' : VoidTypeName #</div>" +
                                "<div class = 'isBonus'> #= (IsBonus == true) ? '[Quà tặng]' : '' #</div>" +
                                "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");


                    columns.Bound(p => p.CalculatingTypeID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CalculatingTypeID #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].CalculatingTypeID' value='#= CalculatingTypeID #' />");
                    columns.Bound(p => p.VATbyRow).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= VATbyRow #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].VATbyRow' value='#= VATbyRow #' />");

                    columns.Bound(p => p.ControlFreeQuantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', ControlFreeQuantity) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].ControlFreeQuantity' value='#= ControlFreeQuantity #' />");

                    columns.Bound(p => p.QuantityRemains).Title("SL XK").Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(@Model.HasGoodsIssue ? false : true)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', QuantityRemains) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");
                    columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', Quantity) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");


                    columns.Bound(p => p.FreeQuantityRemains).Title("QT XK").Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(@Model.HasGoodsIssue ? false : true)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', FreeQuantityRemains) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].FreeQuantityRemains' value='#= FreeQuantityRemains #' />");
                    columns.Bound(p => p.FreeQuantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).EditorTemplateName(@Model.HasGoodsIssue || !@Model.ShowDiscount ? "DecimalReadonly" : "Decimal").Width(50)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', FreeQuantity) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].FreeQuantity' value='#= FreeQuantity #' />");


                    columns.Bound(p => p.ListedGrossPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50).Hidden(@Model.ShowListedGrossPrice ? false : true)
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedGrossPrice) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].ListedGrossPrice' value='#= ListedGrossPrice #' />");
                    
                    columns.Bound(p => p.ListedPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).EditorTemplateName(@Model.HasGoodsIssue || !@Model.ShowDiscount ? "DecimalReadonly" : "Decimal").Width(70)
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedPrice) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].ListedPrice' value='#= ListedPrice #' />");

                    columns.Bound(p => p.DiscountPercent).DisplayNameTitle().Filterable(false).Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden(@Model.ShowDiscount ? false : true).EditorTemplateName(@Model.HasGoodsIssue || !@Model.ShowDiscount ? "DecimalReadonly" : "Decimal")
                        .Format("{0:n1}%")
                        .ClientFooterTemplate("#= kendo.format('{0:n1}%', average) #")
                        .ClientTemplate("#= kendo.format('{0:n1}%', DiscountPercent) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].DiscountPercent' value='#= DiscountPercent #' />");

                    columns.Bound(p => p.UnitPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(70).Hidden(@Model.ShowDiscount ? false : true)
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', UnitPrice) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].UnitPrice' value='#= UnitPrice #' />");

                    columns.Bound(p => p.TradeDiscountRate).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}%', TradeDiscountRate) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].TradeDiscountRate' value='#= TradeDiscountRate #' />");

                    columns.Bound(p => p.ListedAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(110).Hidden(@Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate(@Model.VATbyRow ? "#= kendo.format('{0:n0}', sum) #" : "<div>CK <span>#= data.TradeDiscountRate.max #</span>%: #= kendo.format('{0:n0}', DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TT: #= kendo.format('{0:n0}', DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ")) #</div><div>VAT <span>#= data.VATPercent.max #</span>%: #= kendo.format('{0:n0}', DoRound(DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TC: #= kendo.format('{0:n0}', DoRound(DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") - (-DoRound(DoRound(data.ListedAmount.sum - DoRound(data.ListedAmount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")), " + GlobalEnums.rndAmount + ")) #</div>")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedAmount) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].ListedAmount' value='#= ListedAmount #' />");

                    columns.Bound(p => p.Amount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(110).Hidden(@Model.ShowDiscount ? false : true)
                        .Format("{0:n0}")
                        .ClientFooterTemplate(@Model.VATbyRow ? "#= kendo.format('{0:n0}', sum) #" : "<div>CK <span>#= data.TradeDiscountRate.max #</span>%: #= kendo.format('{0:n0}', DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TT: #= kendo.format('{0:n0}', DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ")) #</div><div>VAT <span>#= data.VATPercent.max #</span>%: #= kendo.format('{0:n0}', DoRound(DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")) #</div><div>TC: #= kendo.format('{0:n0}', DoRound(DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") - (-DoRound(DoRound(data.Amount.sum - DoRound(data.Amount.sum * data.TradeDiscountRate.max/100, " + GlobalEnums.rndAmount + "), " + GlobalEnums.rndAmount + ") * data.VATPercent.max/100, " + GlobalEnums.rndAmount + ")), " + GlobalEnums.rndAmount + ")) #</div>")
                        .ClientTemplate("#= kendo.format('{0:n0}', Amount) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].Amount' value='#= Amount #' />");

                    columns.Bound(p => p.VATPercent).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50).Hidden(!@Model.VATbyRow)
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}%', VATPercent) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].VATPercent' value='#= VATPercent #' />");

                    columns.Bound(p => p.ListedVATAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(90).Width(90).Hidden(!@Model.VATbyRow || @Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedVATAmount) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].ListedVATAmount' value='#= ListedVATAmount #' />");
                    columns.Bound(p => p.VATAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(90).Hidden(!@Model.VATbyRow || !@Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', VATAmount) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].VATAmount' value='#= VATAmount #' />");


                    columns.Bound(p => p.GrossPrice).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(90).Hidden()
                        .Format("{0:n0}")
                        .ClientTemplate("#= kendo.format('{0:n0}', GrossPrice) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].GrossPrice' value='#= GrossPrice #' />");


                    columns.Bound(p => p.ListedGrossAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(90).Hidden(!@Model.VATbyRow || @Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', ListedGrossAmount) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].ListedGrossAmount' value='#= ListedGrossAmount #' />");
                    columns.Bound(p => p.GrossAmount).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(90).Hidden(!@Model.VATbyRow || !@Model.ShowDiscount ? true : false)
                        .Format("{0:n0}")
                        .ClientFooterTemplate("#= kendo.format('{0:n0}', sum) #")
                        .ClientTemplate("#= kendo.format('{0:n0}', GrossAmount) #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].GrossAmount' value='#= GrossAmount #' />");


                    columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");

                    columns.Bound(p => p.IsBonus).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (IsBonus == null)? '' : IsBonus #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].IsBonus' value='#= (IsBonus == null) ? '' : IsBonus #' />");

                    columns.Bound(p => p.InActivePartial).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= (InActivePartial == null)? '' : InActivePartial #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].InActivePartial' value='#= (InActivePartial == null) ? '' : InActivePartial #' />");

                    //columns.Bound(p => p.InActivePartialDate).DisplayNameTitle().Filterable(false).Hidden()
                    //    .ClientTemplate("#= (InActivePartialDate == null)? '' : InActivePartialDate #" + "<input type='hidden' name='SalesReturnViewDetails[#= index(data) #].InActivePartialDate' value='#= (InActivePartialDate == null) ? '' : InActivePartialDate #' />");


                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });

                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(50).Hidden(!@Model.Voidable && !@Model.UnVoidable)
                        .ClientTemplate("<a class='k-button' style='padding:0px;' onclick='callVoidDetail(#= SalesReturnDetailID #)'><span class='k-icon k-edit'></span></a>");
                })
                    .Filterable()
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            //toolbar.Create().HtmlAttributes(new { @class = "fa fa-map-marker" }).Text("Add new aa le ea1");
                            if (Model.HasGoodsIssue == true)
                                toolbar.Template(@<text>
                                    <button type="button" class="k-button" onclick="GetPendingGoodsIssueDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Chọn mặt hàng từ phiếu xuất kho </button>
                                    <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Trả hàng toàn bộ số lượng đã xuất kho </button>
                                </text>);
                            else
                                toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="$('#kendoGridDetails').data('kendoGrid').addRow()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm mặt hàng </button>
                                </text>);
                        }
                        else
                        {//Add a functionless button for display purpose only
                            toolbar.Template(
                                @<text>
                                    <div>
                                        @(Html.Kendo().Button()
                                            .Name("iconButton")
                                            .HtmlAttributes(new { type = "button" })
                                            .SpriteCssClass("k-icon k-i-ungroup") //.Content("My button label")
                                        )
                                    </div>
                                </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .Events(events =>
                    {
                        events.DataBound(@<text>
                            function(e) {

                            var grid = $("#kendoGridDetails").data("kendoGrid");
                            var data = grid.dataSource.data();
                            $.each(data, function (i, row) {
                            var isWarrantyClaim = row.VoidTypeName;
                            if (isWarrantyClaim != null && isWarrantyClaim != '') {
                            $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                            }
                            });
                            }
                        </text>);
                    }).DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Model(model =>
                            {
                                model.Id(x => x.SalesReturnDetailID);
                                model.Field(m => m.SalesReturnDetailID).DefaultValue(0);
                                model.Field(m => m.SalesReturnID).DefaultValue(@Model.SalesReturnID);
                                model.Field(m => m.CalculatingTypeID).DefaultValue(@GlobalEnums.CalculatingTypeID);
                                model.Field(m => m.VATbyRow).DefaultValue(@Model.VATbyRow);
                            })
                            .Events(events =>
                            {
                                events.Error("kendGrid_ErrorHandler");
                            })
                            .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                            .Aggregates(a => a.Add(x => x.TradeDiscountRate).Max())
                            .Aggregates(a => a.Add(x => x.VATPercent).Max())
                            .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                            .Aggregates(a => a.Add(x => x.Quantity).Sum())                            
                            .Aggregates(a => a.Add(x => x.FreeQuantityRemains).Sum())
                            .Aggregates(a => a.Add(x => x.FreeQuantity).Sum())
                            .Aggregates(a => a.Add(x => x.DiscountPercent).Average())
                            .Aggregates(a => a.Add(x => x.ListedAmount).Sum())
                            .Aggregates(a => a.Add(x => x.Amount).Sum())
                            .Aggregates(a => a.Add(x => x.ListedVATAmount).Sum())
                            .Aggregates(a => a.Add(x => x.VATAmount).Sum())
                            .Aggregates(a => a.Add(x => x.ListedGrossAmount).Sum())
                            .Aggregates(a => a.Add(x => x.GrossAmount).Sum())
                        )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PaymentTerm.cshtml")
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>


        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "SalesReturns")"> <img src="~/Content/Images/New/save-icon.png" /> Lưu phiếu </button>
            }
            
            @if (Model.SalesReturnID > 0 && !Model.Approvable && !Model.UnApprovable)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", "SalesReturns", new {id = @Model.SalesReturnID })'"> <img src="~/Content/Images/Mains/@(!@Model.Approved ? "Actions-ok-icon32.png" : "Cross-icon-cancel32.png")" /> @(!Model.Approved ? "Duyệt phiếu trả hàng" : "Hủy duyệt phiếu trả hàng này") </button>
            }                        
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

        @if (Model.Editable && !Model.HasGoodsIssue)
        {
            <div><input style="font-size: 11px;" type="file" name="xlfile" id="xlf" /></div>
        }

    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>
<script src="@Url.Content("~/Scripts/Controllers/Sales/SalesOrders/Import.js")"></script>

<script type="text/javascript">
    function GetPendingGoodsIssueDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingGoodsIssueDetails", "SalesReturns", new { area = "Sales" })", "Chọn mặt hàng từ đơn đặt hàng", "@SettingsManager.PopupWidthLarge", "@SettingsManager.PopupHeightWithTab");
        });
    }

    function callVoidDetail(salesReturnDetailID) {
        require(["kpopupWindow"], function (kpopupWindow) {
            var voidDetailWindow = new kpopupWindow();
            voidDetailWindow.openWindow($("#popupWindow"), "@Url.Action("VoidDetail", "SalesReturns")" + "/" + $("#SalesReturnID").val() + "/" + salesReturnDetailID, "Hủy/ phục hồi một phần đề nghị giao hàng", @SettingsManager.PopupWidthVoid,  @SettingsManager.PopupHeightVoid);
        });
    }

    window.urlCommoditiesApi = '@Url.Action("GetCommodityImport", "CommodityAPIs", new { area = "Commons" })';
</script>

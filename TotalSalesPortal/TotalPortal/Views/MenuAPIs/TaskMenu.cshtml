@model IEnumerable<TotalModel.Models.ModuleDetail>

<ul id="left-menu">

    @(Html.Kendo().Menu()
    .Name("grouplist")
    .HtmlAttributes(new { style = "width: 70px;" })
      .Items(items =>
      {
          foreach (var item in Model)
          {
              if (item.SoftDescription.Substring(0, 3) == "___")
              {
                  items.Add()
                    .Text(item.SoftDescription)
                    .HtmlAttributes(new { @class = "separation", @itemmenu = "item" });
              }
              else
                  if (item.TaskID == ViewBag.TaskID)
                  {
                      items.Add()
                          .Text(item.SoftDescription)
                          .Content(item.Description)
                          .ImageUrl(item.ImageIndex)
                          .HtmlAttributes(new { @class = "menuModuleDetailItems", @NmvnTaskID = item.TaskID, @taskName = item.Description, @itemmenu = "item", @taskActions = item.Actions, @taskController = item.Controller, @highlight = "highlight" });

                  }
                  else
                  {
                      items.Add()
                          .Text(item.SoftDescription)
                          .Content(item.Description)
                          .ImageUrl(item.ImageIndex)
                          .HtmlAttributes(new { @class = "menuModuleDetailItems", @NmvnTaskID = item.TaskID, @taskName = item.Description, @itemmenu = "item", @taskActions = item.Actions, @taskController = item.Controller });
                  }
          }
      })
        .Events(e => e.Select("selectTask"))
        .Orientation(MenuOrientation.Vertical)
    )

</ul>

<script>
    function selectTask(e) {

        $("#grouplist").find(".k-state-selected").removeClass("k-state-selected");
        $(e.item).addClass("k-state-selected");

        taskID = $(e.item).attr("taskID");
        taskName = $(e.item).attr("taskName");
        taskController = $(e.item).attr("taskController");
        taskActions = $(e.item).attr("taskActions");

        if (taskController != "") {
            var url = '@Url.Action("taskActions", "taskController")';
            url = url.replace("taskActions", taskActions);
            url = url.replace("taskController", taskController);

            window.open(url, "_self");
        }
    }

    $(document).ready(function () {

        if (requireConfig != undefined && requireConfig.pageOptions.NmvnModuleID != undefined) {
            $('.menuModuleItems').each(function (i, obj) {
                if ($(obj).attr("NmvnModuleID") == requireConfig.pageOptions.NmvnModuleID) {

                    if ($(obj).hasClass("k-state-selected_1"))
                        $(obj).removeClass("k-state-selected_1");

                    $(obj).addClass("k-state-selected");
                }
            });
        }

        if (requireConfig != undefined && requireConfig.pageOptions.NmvnTaskID != undefined) {
            $('.menuModuleDetailItems').each(function (i, obj) {
                if ($(obj).attr("NmvnTaskID") == requireConfig.pageOptions.NmvnTaskID) {
                    $(obj).addClass("k-state-selected");
                }
            });
        }
    });

</script>

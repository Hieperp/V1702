@using TotalBase.Enums;
@using TotalPortal.Configuration

<input id="SelectedUserID" value="0" style="display:none" />
<input id="SelectedTaskID" value="0" style="display:none" />

<div>
    @(Html.Kendo().PanelBar()
        .Name("MasterPanelBar")
        .ExpandMode(PanelBarExpandMode.Single)
        .Items(items =>
        {
            items.Add()
                .Text("Users")
                .Selected(true)
                .Expanded(true)
                .Content(@<text>

                    <div style="background: radial-gradient(#f6f5f5, #e9e8e8); color: #428bca; margin-bottom: 1px; padding: 1px 1px 0px 16px; border-radius: 4px; "> <img src="~/Content/Images/Mains/add-contact-darkblue.png" /> @Html.ActionLink("Register new user", "Register", "Account")  <span style="float:right; padding: 5px 4px 0px 0px; "> @Html.CheckBox("ShowInActiveUsers", false) </span> <span style="float:right; padding: 5px 4px 0px 0px; color: GrayText; "> Show locked users </span> </div>

                    @(Html.Kendo().Grid<TotalModel.Models.UserIndex>()
                        .Name("kendoGridUserIndex")
                        .Columns(columns =>
                        {
                            columns.Bound(p => p.UserID).DisplayNameTitle().Hidden();
                            columns.Bound(p => p.LocationOU).Title("DIV").Hidden();
                            columns.Bound(p => p.LastName).Title("").Width(100);
                            columns.Bound(p => p.FirstName).Title("").Width(100);
                            columns.Bound(p => p.UserName).Title("").Width(600);

                            columns.Template(t => { }).Title("InActive").ClientTemplate("<input id = 'InActive' class='UserIndex-GridCheckbox' #= InActive ? checked='checked':'' #  type='checkbox' disabled/>").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(10);

                            columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(80)
                                .ClientTemplate("<a class='k-button' style='padding-left:5px; padding-top:0px; padding-bottom:5px; min-width:28px; width:28px' onclick='UserToggleVoid(#= UserID #)'><span class='k-icon k-i-lock'></span></a>");
                        })
                        .Selectable()
                        .Editable(e => e.Enabled(false))
                        .Events(e => { e.Change("UserTask_OnChange"); e.DataBound("onDataBoundUserIndex"); })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Group(group => group.Add(p => p.LocationOU))
                            .Read(read => read.Action("GetUserIndexes", "UserAPIs", new { area = "Generals" }).Data("onGetUserIndexes"))
                            .Sort(sort => { sort.Add(p => p.UserName); })
                            .Model(model =>
                            {
                                model.Id(x => x.UserID);
                                model.Field(m => m.UserID).DefaultValue(0);
                            })
                            .ServerOperation(true)
                        )
                        .HtmlAttributes(new { @class = "grid-class" })
                    )
                </text>).HtmlAttributes(new { @class = "panel-class" });


            items.Add()
                .Text("Task")
                .Expanded(false)
                .Content(@<text>
                    <div class="first-panel">
                        @(Html.Kendo().Grid<TotalModel.Models.TaskIndex>()
                            .Name("kendoGridTaskIndex")
                            .Columns(columns =>
                                {
                                    columns.Bound(p => p.TaskID).DisplayNameTitle().Hidden();
                                    columns.Bound(p => p.ModuleSerialName).Title("M").Hidden();
                                    columns.Bound(p => p.TaskName).Title("Task").Hidden();
                                    columns.Bound(p => p.SoftTaskName).Title("Task").Width(300);
                                }
                            )
                            .Selectable()
                            .Events(e => { e.Change("UserTask_OnChange"); e.DataBound("onDataBoundTaskIndex"); })
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Group(group => group.Add(p => p.ModuleSerialName))
                                .Read(read => read.Action("GetTaskIndexes", "UserAPIs", new { area = "Generals" }))
                                .Model(model =>
                                    {
                                        model.Id(x => x.TaskID);
                                        model.Field(m => m.TaskID).DefaultValue(0);
                                    }
                                )
                                .ServerOperation(true)
                            )
                            .HtmlAttributes(new { @class = "grid-class" })
                        )
                    </div>


                    <div class="second-panel">

                        @(Html.Kendo().Grid<TotalModel.Models.UserAccessControl>()
                            .Name("kendoGridUserAccessControl")
                            .Columns(g =>
                                {
                                    g.Bound(p => p.AccessControlID).DisplayNameTitle().Hidden();
                                    g.Template(t => { }).Title("Show Discount").ClientTemplate("<input id = 'ShowDiscount' class='GridCheckbox' #= ShowDiscount ? checked='checked':'' #  type='checkbox' />").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(10).Hidden();
                                    g.Group(gr => gr
                                        .Title("Organizational Units").HeaderHtmlAttributes(new { style = "text-align:center" })
                                        .Columns(columns =>
                                            {
                                                columns.Bound(p => p.LocationName).Title("LCT").Width(10);
                                                columns.Bound(p => p.OrganizationalUnitName).Title("Division").Width(68);
                                            }
                                        ))
                                    .Group(gr => gr
                                        .Title("Access Controls").HeaderHtmlAttributes(new { style = "text-align:center" })
                                        .Columns(columns =>
                                            {
                                                columns.Template(t => { }).Title("No Access").ClientTemplate("<input id = 'NoAccess' class='GridCheckbox' #= NoAccess ? checked='checked':'' #  type='checkbox' />").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(10);
                                                columns.Template(t => { }).Title("Read Only").ClientTemplate("<input id = 'ReadOnly' class='GridCheckbox' #= ReadOnly ? checked='checked':'' #  type='checkbox' />").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(10);
                                                columns.Template(t => { }).Title("Editable").ClientTemplate("<input id = 'Editable' class='GridCheckbox' #= Editable ? checked='checked':'' #  type='checkbox' />").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(10);
                                            }
                                        ))
                                    .Group(gr => gr
                                        .Title("Verify Permissions").HeaderHtmlAttributes(new { style = "text-align:center" })
                                        .Columns(columns =>
                                            {
                                                columns.Template(t => { }).Title("Verify").ClientTemplate("<input id = 'ApprovalPermitted' class='GridCheckbox' #= ApprovalPermitted ? checked='checked':'' #  type='checkbox' />").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(10);
                                                columns.Template(t => { }).Title("Unverify").ClientTemplate("<input id = 'UnApprovalPermitted' class='GridCheckbox' #= UnApprovalPermitted ? checked='checked':'' #  type='checkbox' />").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(10);
                                            }
                                        ))
                                    .Group(gr => gr
                                        .Title("Void Permissions").HeaderHtmlAttributes(new { style = "text-align:center" })
                                        .Columns(columns =>
                                            {
                                                columns.Template(t => { }).Title("Void").ClientTemplate("<input id = 'VoidablePermitted' class='GridCheckbox' #= VoidablePermitted ? checked='checked':'' #  type='checkbox' />").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(10);
                                                columns.Template(t => { }).Title("Unvoid").ClientTemplate("<input id = 'UnVoidablePermitted' class='GridCheckbox' #= UnVoidablePermitted ? checked='checked':'' #  type='checkbox' />").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(10);
                                            }
                                        ));
                                })
                            .Selectable()
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Read(read => read.Action("GetUserAccessControls", "UserAPIs", new { area = "Generals" }).Data("onGetUserAccessControls"))
                                .Sort(sort =>
                                    {
                                        sort.Add(s => s.LocationName);
                                        sort.Add(s => s.OrganizationalUnitName);
                                    })
                                .Model(model =>
                                {
                                    model.Id(x => x.AccessControlID);
                                    model.Field(m => m.AccessControlID).DefaultValue(0);
                                })
                                .ServerOperation(true)
                            )
                            .HtmlAttributes(new { @class = "grid-class" })
                        )



                        <div style="background: radial-gradient(#428bca, #3980bd); color: yellow; margin-top: 1px; padding: 8px 8px 7px 12px; border-radius: 4px; "> Permission settings for reports </div>

                        @(Html.Kendo().Grid<TotalModel.Models.UserReportControl>()
                            .Name("kendoGridUserReportControl")
                            .Columns(g =>
                                {
                                    g.Bound(p => p.ReportControlID).DisplayNameTitle().Hidden();

                                    g.Bound(p => p.ReportGroupName).Title("Report").Hidden();
                                    g.Bound(p => p.ReportName).Title("Division").Width(600);

                                    g.Template(t => { }).Title("Enabled").ClientTemplate("<input id = 'Enabled' class='GridCheckbox' #= Enabled ? checked='checked':'' #  type='checkbox' />").HeaderHtmlAttributes(new { style = "text-align:center" }).HtmlAttributes(new { @class = "grid-column-center" }).Width(30);
                                })
                            .Selectable()
                            .Events(e => { e.DataBound("onDataBoundReportControl"); })
                            .DataSource(dataSource => dataSource
                                .Ajax()
                                .Group(group => group.AddDescending(p => p.ReportGroupName))
                                .Read(read => read.Action("GetUserReportControls", "UserAPIs", new { area = "Generals" }).Data("onGetUserReportControls"))
                                .Model(model =>
                                {
                                    model.Id(x => x.ReportControlID);
                                    model.Field(m => m.ReportControlID).DefaultValue(0);
                                })
                                .ServerOperation(true)
                            )
                            .HtmlAttributes(new { @class = "grid-class" })
                        )



                    </div>
                </text>).HtmlAttributes(new { @class = "panel-class" });
        })
    )
</div>



<script type="text/javascript">
    function onDataBoundUserIndex(e) {
        $("#kendoGridUserIndex tr.k-alt").removeClass("k-alt");
    }
    function onDataBoundTaskIndex(e) {
        $("#kendoGridTaskIndex tr.k-alt").removeClass("k-alt");
    }
    function onDataBoundReportControl(e) {
        $("#kendoGridUserReportControl tr.k-alt").removeClass("k-alt");
    }

    function onGetUserIndexes(e) {
        return {
            showInActiveUsers: $("#ShowInActiveUsers").is(":checked")
        };
    } 

    function onGetUserAccessControls(e) {
        return {
            userID: $("#SelectedUserID").val(),
            nmvnTaskID: $("#SelectedTaskID").val()
        };
    }

    function onGetUserReportControls(e) {
        return {
            userID: $("#SelectedUserID").val()
        };
    }


    $("#ShowInActiveUsers").change(function () {
        $("#kendoGridUserIndex").data("kendoGrid").dataSource.read();
    });


    function UserTask_OnChange(e) {
        var dataItem = this.dataItem(this.select());
        var panelbar = $("#MasterPanelBar").data("kendoPanelBar");

        if (dataItem.UserID != undefined) {
            $("#SelectedUserID").val(dataItem.UserID);
            panelbar.expand($("li")); //panelbar.expand($("li", panelbar.element)); https://stackoverflow.com/questions/16471774/is-there-a-way-to-collapse-all-the-panels-of-kendo-panelbar-on-an-action
            panelbar.wrapper.find(".k-header:first").text("Permission settings for: " + dataItem.UserName)

            $("#kendoGridUserReportControl").data("kendoGrid").dataSource.read();
        }
        if (dataItem.TaskID != undefined) {
            $("#SelectedTaskID").val(dataItem.TaskID);

            panelbar.wrapper.find("> li:nth(1) .k-link.k-header").text("Task: " + dataItem.SoftTaskName + " [" + dataItem.TaskName + "]") //https://www.telerik.com/forums/panelbar-bug-changing-title      https://stackoverflow.com/questions/27644612/change-the-text-of-item-of-kendopanelbar     http://dojo.telerik.com/@@OnaBai/Uzugu
        }

        $("#kendoGridUserAccessControl").data("kendoGrid").dataSource.read();
    }



    $('#kendoGridUserAccessControl').on('click', '.GridCheckbox', function () {

        var grid = $('#kendoGridUserAccessControl').data().kendoGrid;
        var dataItem = grid.dataItem($(this).closest('tr'));

        var checked = $(this).is(':checked');
        var accessLevelName = (this.id === "NoAccess" || this.id === "ReadOnly" || this.id === "Editable" ? this.id : (dataItem.ReadOnly ? "ReadOnly" : (dataItem.Editable ? "Editable" : "NoAccess")));

        //if ($("#Editable").val() != 'True')
        //    return;

        return $.ajax({
            url: '@Url.Action("SaveUserAccessControls", "UserAPIs", new { area = "Generals" })',
            data: JSON.stringify({ "accessControlID": dataItem.AccessControlID, "accessLevelName": accessLevelName, "approvalPermitted": (this.id === "ApprovalPermitted" ? checked : dataItem.ApprovalPermitted), "unApprovalPermitted": (this.id === "UnApprovalPermitted" ? checked : dataItem.UnApprovalPermitted), "voidablePermitted": (this.id === "VoidablePermitted" ? checked : dataItem.VoidablePermitted), "unVoidablePermitted": (this.id === "UnVoidablePermitted" ? checked : dataItem.UnVoidablePermitted), "showDiscount": dataItem.ShowDiscount }),

            type: 'POST',
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {
                if (result.SaveResult == "Successfully") {
                    $("#kendoGridUserAccessControl").data("kendoGrid").dataSource.read();
                }
                else
                    alert(result.SaveResult);
            },
            error: function (jqXHR, textStatus) {
                alert(textStatus);
            }
        });
    })


    $('#kendoGridUserReportControl').on('click', '.GridCheckbox', function () {

        var grid = $('#kendoGridUserReportControl').data().kendoGrid;
        var dataItem = grid.dataItem($(this).closest('tr'));

        var checked = $(this).is(':checked');

        return $.ajax({
            url: '@Url.Action("SaveUserReportControls", "UserAPIs", new { area = "Generals" })',
            data: JSON.stringify({ "reportControlID": dataItem.ReportControlID, "enabled": (this.id === "Enabled" ? checked : dataItem.Enabled) }),

            type: 'POST',
            contentType: 'application/json;',
            dataType: 'json',
            success: function (result) {
                if (result.SaveResult == "Successfully") {
                    $("#kendoGridUserReportControl").data("kendoGrid").dataSource.read();
                }
                else
                    alert(result.SaveResult);
            },
            error: function (jqXHR, textStatus) {
                alert(textStatus);
            }
        });
    })



    function UserToggleVoid(userID) {
        var grid = $('#kendoGridUserIndex').data().kendoGrid;
        var dataItem = grid.dataItem(grid.select());

        if (userID == dataItem.UserID) //Check to ensure: User click the button of current select row
            if (confirm("\r\n" + (dataItem.InActive == true ? "Phục hồi" : "Tạm ngưng") + " cấp quyền sử dụng cho: " + "\r\n\r\n" + dataItem.UserName + "\r\n\r\nChọn Ok để tiếp tục. Chọn Cancel để bỏ qua.")) {
                return $.ajax({
                    url: '@Url.Action("UserToggleVoid", "UserAPIs", new { area = "Generals" })',
                    data: JSON.stringify({ "userID": dataItem.UserID, "inActive": (dataItem.InActive? false: true) }),

                    type: 'POST',
                    contentType: 'application/json;',
                    dataType: 'json',
                    success: function (result) {
                        if (result.SaveResult == "Successfully") {
                            $("#kendoGridUserIndex").data("kendoGrid").dataSource.read();
                        }
                        else
                            alert(result.SaveResult);
                    },
                    error: function (jqXHR, textStatus) {
                        alert(textStatus);
                    }
                });
            }
    }


</script>



<style>
    #kendoGridUserIndex.k-grid *, #kendoGridTaskIndex.k-grid *, #kendoGridUserReportControl.k-grid * { /*BORDER ONLY*/
        border: 0 !important;
    }
    /*#kendoGridUserIndex.k-grid, #kendoGridTaskIndex.k-grid * {  ALL GRID LINE (BORDER + INNER)
        background: white !important;
        border: 0 !important;
    }*/


    #kendoGridUserIndex.k-grid .k-header, #kendoGridTaskIndex.k-grid .k-header, #kendoGridUserReportControl.k-grid .k-header {
        display: none;
    }

    #kendoGridUserIndex td.k-group-cell, #kendoGridTaskIndex td.k-group-cell, #kendoGridUserReportControl td.k-group-cell {
        background-color: white;
    }

    .k-pager-wrap {
        display: none;
    }


    .first-panel {
        float: left;
        width: 22%;
        box-sizing: border-box;
    }

    .second-panel {
        float: left;
        width: 78%;
        padding-left: 1px;
        box-sizing: border-box;
        
    }
</style>
